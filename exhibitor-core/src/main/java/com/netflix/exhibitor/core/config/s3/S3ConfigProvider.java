package com.netflix.exhibitor.core.config.s3;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.model.ListObjectsRequest;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.PutObjectResult;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.netflix.exhibitor.core.config.ConfigProvider;
import com.netflix.exhibitor.core.config.InstanceConfig;
import com.netflix.exhibitor.core.config.LoadedInstanceConfig;
import com.netflix.exhibitor.core.config.PropertyBasedInstanceConfig;
import com.netflix.exhibitor.core.s3.S3Client;
import com.netflix.exhibitor.core.s3.S3ClientFactory;
import com.netflix.exhibitor.core.s3.S3Credential;
import com.netflix.exhibitor.core.s3.S3Utils;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Date;
import java.util.Properties;

public class S3ConfigProvider implements ConfigProvider
{
    private final S3ConfigArguments arguments;
    private final S3Client s3Client;
    private final Properties defaults;

    public S3ConfigProvider(S3ClientFactory factory, S3Credential credential, S3ConfigArguments arguments) throws Exception
    {
        this(factory, credential, arguments, new Properties());
    }

    public S3ConfigProvider(S3ClientFactory factory, S3Credential credential, S3ConfigArguments arguments, Properties defaults) throws Exception
    {
        this.arguments = arguments;
        this.defaults = defaults;
        BasicAWSCredentials credentials = new BasicAWSCredentials(credential.getAccessKeyId(), credential.getSecretAccessKey());
        s3Client = factory.makeNewClient(credentials);
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception
    {
        Date        lastModified;
        Properties  properties = new Properties();
        S3Object    object = getConfigObject();
        if ( object != null )
        {
            lastModified = object.getObjectMetadata().getLastModified();
            properties.load(object.getObjectContent());
        }
        else
        {
            lastModified = new Date(0L);
        }

        PropertyBasedInstanceConfig config = new PropertyBasedInstanceConfig(properties, defaults);
        return new LoadedInstanceConfig(config, lastModified.getTime());
    }

    @Override
    public LoadedInstanceConfig storeConfig(InstanceConfig config, long compareLastModified) throws Exception
    {
        {
            S3Object                        object = getConfigObject();
            if ( object != null )
            {
                Date                            lastModified = object.getObjectMetadata().getLastModified();
                if ( lastModified.getTime() != compareLastModified )
                {
                    return null;    // apparently there's no atomic way to do this with S3 so this will have to do
                }
            }
        }

        PropertyBasedInstanceConfig     propertyBasedInstanceConfig = new PropertyBasedInstanceConfig(config);
        ByteArrayOutputStream           out = new ByteArrayOutputStream();
        propertyBasedInstanceConfig.getProperties().store(out, "Auto-generated by Exhibitor");

        byte[]                          bytes = out.toByteArray();
        byte[]                          md5 = S3Utils.md5(ByteBuffer.wrap(bytes));

        ObjectMetadata                  metadata = new ObjectMetadata();
        metadata.setContentLength(bytes.length);
        metadata.setLastModified(new Date());
        metadata.setContentMD5(S3Utils.toBase64(md5));
        PutObjectRequest                putObjectRequest = new PutObjectRequest(arguments.getBucket(), arguments.getKey(), new ByteArrayInputStream(bytes), metadata);
        PutObjectResult                 putObjectResult = s3Client.putObject(putObjectRequest);

        if ( !putObjectResult.getETag().equals(S3Utils.toHex(md5)) )
        {
            throw new Exception("Unable to match MD5 for config");
        }

        return new LoadedInstanceConfig(propertyBasedInstanceConfig, metadata.getLastModified().getTime());
    }

    private S3Object getConfigObject() throws Exception
    {
        ListObjectsRequest  request = new ListObjectsRequest();
        request.setBucketName(arguments.getBucket());
        ObjectListing       listing = s3Client.listObjects(request);
        S3ObjectSummary     keySummary = Iterables.find
        (
            listing.getObjectSummaries(),
            new Predicate<S3ObjectSummary>()
            {
                @Override
                public boolean apply(S3ObjectSummary summary)
                {
                    return summary.getKey().equals(arguments.getKey());
                }
            },
            null
        );
        if ( keySummary == null )
        {
            return null;
        }

        return s3Client.getObject(arguments.getBucket(), arguments.getKey());
    }
}
