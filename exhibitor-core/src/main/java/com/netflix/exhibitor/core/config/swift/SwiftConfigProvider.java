/*
 * Copyright 2012 Netflix, Inc.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.netflix.exhibitor.core.config.swift;

import com.netflix.exhibitor.core.config.ConfigCollection;
import com.netflix.exhibitor.core.config.ConfigProvider;
import com.netflix.exhibitor.core.config.LoadedInstanceConfig;
import com.netflix.exhibitor.core.config.PropertyBasedInstanceConfig;
import com.netflix.exhibitor.core.config.PseudoLock;

import org.jclouds.io.Payload;
import org.jclouds.io.payloads.ByteArrayPayload;
import org.jclouds.openstack.swift.v1.SwiftApi;
import org.jclouds.openstack.swift.v1.domain.SwiftObject;
import org.jclouds.openstack.swift.v1.features.ContainerApi;
import org.jclouds.openstack.swift.v1.features.ObjectApi;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.Properties;

public class SwiftConfigProvider implements ConfigProvider
{
	private final SwiftApi  swiftApi;
	private final String hostname;
	private final SwiftConfigArguments arguments;
	private final ObjectApi objectApi;
	private final Properties defaults;
	
	/**
	 * 
	 * @param swiftApi SwiftApi
	 * @param arguments args
	 * @param hostname this VM's hostname
	 * @param defaults default props
	 * @throws Exception
	 */
    public SwiftConfigProvider(SwiftApi  swiftApi, SwiftConfigArguments arguments,String hostname, Properties defaults) throws Exception
    {
    	this.swiftApi = swiftApi;
    	this.hostname = hostname;
		this.arguments = arguments;
        this.objectApi = initialize(arguments.getContainerName());
        this.defaults = defaults;
    }

    private ObjectApi initialize (String containerName)
    {
		String region = swiftApi.getConfiguredRegions().iterator().next();
		
		ContainerApi containerApi = swiftApi.getContainerApi(region);
		if (containerApi.get(containerName) ==null)
			containerApi.create(containerName);
		
	    return swiftApi.getObjectApi(region, containerName);

    }

    @Override
    public void start() throws Exception
    {
        // NOP
    }

    @Override
    public void close() throws IOException
    {

		swiftApi.close();
    }

    @Override
    public PseudoLock newPseudoLock() throws Exception
    {
        return new SwiftPseudoLock
        (
        	objectApi,
            arguments.getLockArguments().getPrefix(),
            arguments.getLockArguments().getTimeoutMs(),
            arguments.getLockArguments().getPollingMs(),
            arguments.getLockArguments().getSettlingMs()
        );
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception
    {	
        Date        lastModified;
        Properties  properties = new Properties();
        SwiftObject obj= objectApi.get(this.arguments.getKey());

        if (obj !=null)
        {
            lastModified = obj.getLastModified();

        	InputStream is = null;
        	try{
		    	is =  obj.getPayload().openStream();
		        properties.load(is);
		    	is.close();
        	}finally{
        		if (is !=null) 
        			is.close();
        	}
        }
        else
        {
            lastModified = new Date(0L);
        }

        PropertyBasedInstanceConfig config = new PropertyBasedInstanceConfig(properties, defaults);
        return new LoadedInstanceConfig(config, lastModified.getTime());
    }

    
    @Override
    public LoadedInstanceConfig storeConfig(ConfigCollection config, long compareVersion) throws Exception
    {
        SwiftObject obj= objectApi.get(arguments.getKey());
        if ( obj!=null && obj.getLastModified().getTime() != compareVersion )
        {
        	return null;
        }

        PropertyBasedInstanceConfig     propertyBasedInstanceConfig = new PropertyBasedInstanceConfig(config);
        ByteArrayOutputStream           out = new ByteArrayOutputStream();
        propertyBasedInstanceConfig.getProperties().store(out, "Auto-generated by Exhibitor " + hostname);

        byte[]                          bytes = out.toByteArray();
	    Payload payload =  new ByteArrayPayload(bytes);
    	objectApi.put(arguments.getKey(), payload);
    	if (obj == null)
    	{
    		obj = objectApi.get(arguments.getKey());
    	}

        return new LoadedInstanceConfig(propertyBasedInstanceConfig, obj.getLastModified().getTime());
    }

}
